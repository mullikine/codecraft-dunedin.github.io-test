<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CodeCraft Dunedin</title>
    <link>https://codecraft.org.nz/</link>
    <description>Recent content on CodeCraft Dunedin</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 03 Nov 2020 00:00:00 +1300</lastBuildDate><atom:link href="https://codecraft.org.nz/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Migrate to Hugo from Jekyll</title>
      <link>https://codecraft.org.nz/posts/migrate-from-jekyll/</link>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://codecraft.org.nz/posts/migrate-from-jekyll/</guid>
      <description>Move static content to static Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/ ▾ images/ logo.png  should become
▾ &amp;lt;root&amp;gt;/ ▾ static/ ▾ images/ logo.png  Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description>
    </item>
    
    <item>
      <title>Modern Embedded Debugging Show-and-tell</title>
      <link>https://codecraft.org.nz/posts/2020-11-03-rust-embedded-debugging/</link>
      <pubDate>Tue, 03 Nov 2020 00:00:00 +1300</pubDate>
      
      <guid>https://codecraft.org.nz/posts/2020-11-03-rust-embedded-debugging/</guid>
      <description>Tools and techniques for debugging embedded systems are like anything else: a compromise between competing goals. Historically, they have been some combination of proprietary (usually expensive) and hacky, and generally lag behind those for regular computers. Debuggers are usually relatively slow, which can mean they aren&amp;rsquo;t usable for debugging in the real-time environments that embedded systems are often used in; rather than a debug_printf(&amp;quot;got here\n&amp;quot;);, it might only be practical to insert a turn_on_led(); in a suspect piece of code.</description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>https://codecraft.org.nz/posts/goisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://codecraft.org.nz/posts/goisforlovers/</guid>
      <description>Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.
This document is a brief primer on using Go templates.</description>
    </item>
    
    <item>
      <title>Getting Started with Hugo</title>
      <link>https://codecraft.org.nz/posts/hugoisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://codecraft.org.nz/posts/hugoisforlovers/</guid>
      <description>Step 1. Install Hugo Go to Hugo releases and download the appropriate version for your OS and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at Install Hugo
Step 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:
 Clone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:</description>
    </item>
    
  </channel>
</rss>
